# -*- coding: utf-8 -*-
"""House Price Prediction _model and Evaluate accuracy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/174PHzFq7DQQzspKw_060z8HwKRSFXLfZ

### Problem Statement

A real estate company wishes to analyse the prices of properties based on various factors such as area, number of rooms, bathrooms, bedrooms, etc. Create a multiple linear regression model which is capable of predicting the sale price of houses based on multiple factors and evaluate the accuracy of this model.

---

### List of Activities

**Activity 1:** Analysing the Dataset

**Activity 2:** Data Preparation
  
**Activity 3:** Train-Test Split

**Activity 4:**  Model Training

**Activity 5:** Model Prediction and Evaluation

---

#### Activity 1:  Analysing the Dataset

- Create a Pandas DataFrame for **Housing** dataset using the below link. This dataset consists of following columns:


|Field|Description|
|---:|:---|
|price|Sale price of a house in INR|
|area|Total size of a property in square feet|
|bedrooms|Number of bedrooms|
|bathrooms|Number of bathrooms|
|storeys|Number of storeys excluding basement|
|mainroad|yes, if the house faces a main road|
|livingroom|yes, if the house has a separate living room or a drawing room for guests|
|basement|yes, if the house has a basement|
|hotwaterheating|yes, if the house uses gas for hot water heating|
|airconditioning|yes, if there is central air conditioning|
|parking|number of cars that can be parked|
|prefarea|yes, if the house is located in the preferred neighbourhood of the city|


  **Dataset Link:** https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/house-prices.csv

- Print the first five rows of the dataset. Check for null values and treat them accordingly.
"""

# Import modules
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df=pd.read_csv('https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/house-prices.csv')
# Dataset Link: 'https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/house-prices.csv'
df.head()
# Print first five rows using head() function

# Check if there are any null values. If any column has null values, treat them accordingly
df.isna().sum()

"""---

#### Activity 2: Data Preparation

This dataset contains many columns having categorical data i.e. values 'Yes' or 'No'. However for linear regression, we need numerical data. So you need to convert all 'Yes' and 'No' values to 1s and 0s, where 
- 1 means 'Yes'
- 0 means 'No'

Similarly, replace

- `unfurnished` with 0
- `semi-furnished` with 1
- `furnished` with 2

**Hint:** To replace all 'Yes' values with 1 and 'No' values with 0, use `replace()` function of the DataFrame object. 

For ex: `df.replace(to_replace="yes", value=1, inplace=True)` $\Rightarrow$ replaces the "yes" values in all columns with 1. If you need to make changes inplace, use `inplace` boolean argument.
"""

# Replace all the non-numeric values with numeric values.
df.replace(to_replace="yes", value=1, inplace=True)
#df.replace(to_replace="No", value=0, inplace=True)
df.replace(to_replace="unfurnished", value=0, inplace=True)
df.replace(to_replace="semi-furnished", value=1, inplace=True)
df.replace(to_replace="furnished", value=2, inplace=True)
df.replace(to_replace="no", value=0, inplace=True)
df.head()

"""---

#### Activity 3: Train-Test Split

You need to predict the house prices based on several factors. Thus, `price` is the target variable and other columns except `price` will be feature variables.

Split the dataset into training set and test set such that the training set contains 67% of the instances and the remaining instances will become the test set.
"""

# Split the DataFrame into the training and test sets.
from sklearn.model_selection import train_test_split

x=df.drop('price',axis=1)

y=df['price']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.33,random_state=42)

"""---

#### Activity 4: Model Training

Implement multiple linear regression using `sklearn` module in the following way:

1. Reshape the target variable array into two-dimensional arrays by using `reshape(-1, 1)` function of the numpy module.
2. Deploy the model by importing the `LinearRegression` class and create an object of this class.
3. Call the `fit()` function on the LinearRegression object.
"""

# Create two-dimensional NumPy arrays for the target variable 
from sklearn.linear_model import LinearRegression

y_train_reshaped=y_train.values.reshape(-1,1)

y_test_reshaped=y_test.values.reshape(-1,1)

# Build linear regression model 
lin_reg=LinearRegression()
lin_reg.fit(x_train,y_train_reshaped)

# Print the value of the intercept 
print('constant=',lin_reg.intercept_)
# Print the names of the features along with the values of their corresponding coefficients.

for i in list(zip(x.columns.values,lin_reg.coef_[0])):
  print(i[0],i[1])

"""---

#### Activity 5: Model Prediction and Evaluation

Predict the values for both training and test sets by calling the `predict()` function on the LinearRegression object. Also, calculate the $R^2$, MSE, RMSE and MAE values to evaluate the accuracy of your model.
"""

# Predict the target variable values for training and test set

y_train_pred=lin_reg.predict(x_train)

y_test_pred=lin_reg.predict(x_test)

# Evaluate the linear regression model using the 'r2_score', 'mean_squared_error' & 'mean_absolute_error' functions of the 'sklearn' module.
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error


print(f"Train Set\n{'-' * 50}")
print(f"R-squared: {r2_score(y_train_reshaped, y_train_pred):.3f}")
print(f"Mean Squared Error: {mean_squared_error(y_train_reshaped, y_train_pred):.3f}")
print(f"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_train_reshaped, y_train_pred)):.3f}")
print(f"Mean Absolute Error: {mean_absolute_error(y_train_reshaped, y_train_pred):.3f}")
      
print(f"\n\nTest Set\n{'-' * 50}")
print(f"R-squared: {r2_score(y_test_reshaped, y_test_pred):.3f}")
print(f"Mean Squared Error: {mean_squared_error(y_test_reshaped, y_test_pred):.3f}")
print(f"Root Mean Squared Error: {np.sqrt(mean_squared_error(y_test_reshaped, y_test_pred)):.3f}")
print(f"Mean Absolute Error: {mean_absolute_error(y_test_reshaped, y_test_pred):.3f}")